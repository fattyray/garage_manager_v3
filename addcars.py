# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled2.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import *

import get_img
import getmask
import ocr

class Ui_MainWindow(QMainWindow):
    def __init__(self):  # 添加初始化函数
        super(Ui_MainWindow, self).__init__()
        self.setupUi(self)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1142, 834)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.centralwidget.setStyleSheet("""
              #centralwidget{  
              background-image: url('background.jpg');
              background-size: cover;
              background-repeat: no-repeat;
              background-position: center;
              }
""")
        self.label.setGeometry(QtCore.QRect(20, 10, 1121, 281))
        self.label.setObjectName("label")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(260, 320, 531, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(830, 310, 160, 100))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.pushButton_4)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(330, 360, 431, 361))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.verticalLayoutWidget_2)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_2.addWidget(self.lineEdit_2)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.pushButton_6 = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout_2.addWidget(self.pushButton_6)
        self.horizontalLayoutWidget_7 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_7.setGeometry(QtCore.QRect(260, 360, 531, 31))
        self.horizontalLayoutWidget_7.setObjectName("horizontalLayoutWidget_7")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_7)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_7)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.horizontalLayout_7.addWidget(self.lineEdit_7)
        self.pushButton_5 = QtWidgets.QPushButton(self.horizontalLayoutWidget_7)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout_7.addWidget(self.pushButton_5)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1142, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.pushButton_2.clicked.connect(self.getcam)
        self.pushButton_3.clicked.connect(self.recognize)
        self.pushButton_4.clicked.connect(self.cartype)
        self.pushButton_6.clicked.connect(self.submit)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "车辆识别"))
        self.pushButton.setText(_translate("MainWindow", "确认"))
        self.pushButton_2.setText(_translate("MainWindow", "拍照/重拍"))
        self.pushButton_3.setText(_translate("MainWindow", "识别车牌"))
        self.pushButton_4.setText(_translate("MainWindow", "识别车型"))
        self.label_3.setText(_translate("MainWindow", "车主姓名"))
        self.pushButton_6.setText(_translate("MainWindow", "确认提交"))
        self.pushButton_5.setText(_translate("MainWindow", "确认"))

    def getcam(self):
        self.pushButton_3.setEnabled(False)
        get_img.Getimg(self.label.width(), self.label.height())
        self.label.setPixmap(QPixmap("cap.jpg"))
        self.pushButton_3.setEnabled(True)

    def recognize(self):
        nums = getmask.Getmask("cap_raw.jpg")
        print(nums)
        dist = "plate/CAR_" + str(nums) + ".jpg"
        if nums == -1:
            self.label.setPixmap(QPixmap("notfound.png"))
        else:

            self.label.setPixmap(QPixmap("CAR_RAW.jpg"))
            PLATE = ocr.OCR_detail()
            print(PLATE)
            # 识别识别就拿识别到的最大的框中的内容作为识别结果
            if len(PLATE) == 0:
                PLATE = ocr.OCR_raw(dist)
                self.lineEdit.setText(PLATE)
            else:
                self.lineEdit.setText(PLATE)

    def cartype(self):
        import cartype
        tmp = cartype.baidu_detect("cap_raw.jpg")
        self.lineEdit_7.setText(tmp)

    def submit(self):

        ans = dict()
        ans["plate"] = self.lineEdit.text()
        ans["cartype"] = self.lineEdit_7.text()
        ans["owner"] = self.lineEdit_2.text()

        flag = False
        import db_use
        if not db_use.hasowner(ans["owner"]):
            flag = True
        for key, val in ans.items():
            if len(val) == 0:
                flag = True
        if flag:
            if not db_use.hasowner(ans["owner"]):
                reply = QMessageBox.warning(self, '错误', '该用户并不存在', QMessageBox.Yes | QMessageBox.No,
                                            QMessageBox.Yes)
            else:
                reply = QMessageBox.warning(self, '错误', '请填写所有信息', QMessageBox.Yes | QMessageBox.No,
                                            QMessageBox.Yes)
        else:
            import db_use
            id = db_use.getowner(ans["owner"])
            db_use.createcar(ans["plate"], ans["cartype"], id)
            nums = db_use.hascartype(ans["cartype"])
            print(123)
            if nums == 0:
                import cartype_to_ishigh
                import db_use
                ishigh = cartype_to_ishigh.baidu_ishigh("cap_raw.jpg")
                db_use.createcartype(ans["cartype"], ishigh)
            reply = QMessageBox.information(self, '成功', '已经加入新车辆', QMessageBox.Yes | QMessageBox.No,
                                        QMessageBox.Yes)
